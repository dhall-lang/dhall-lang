{-
The `and` function returns `False` if there are any `False` elements in the
`List` and returns `True` otherwise

Examples:

```
./and [ True, False, True ] = False

./and ([] : List Bool) = True
```
-}
    let and
        : List Bool → Bool
        =   λ(xs : List Bool)
          → List/fold Bool xs Bool (λ(l : Bool) → λ(r : Bool) → l && r) True

in  and
