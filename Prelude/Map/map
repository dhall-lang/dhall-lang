{-
Transform a `Map` by applying a function to each value

Examples:

```
./map Text Natural Bool Natural/even
  [ { mapKey = "A", mapValue = 2 }
  , { mapKey = "B", mapValue = 3 }
  , { mapKey = "C", mapValue = 5 }
  ]
= [ { mapKey = "A", mapValue = True }
  , { mapKey = "B", mapValue = False }
  , { mapKey = "C", mapValue = False }
  ]

./map Text Natural Bool Natural/even
    ([] : List { mapKey : Text, mapValue : Natural })
= [] : List { mapKey : Text, mapValue : Bool }
```
-}

let Map = ../Map.dhall

let List/map = ../List/map

let map : ∀(k : Type) → ∀(a : Type) → ∀(b : Type) → (a → b) → Map k a → Map k b
      = λ(k : Type)
      → λ(a : Type)
      → λ(b : Type)
      → λ(f : a → b)
      → λ(m : Map k a)
      → List/map { mapKey : k, mapValue : a } { mapKey : k, mapValue : b }
        (λ(before : { mapKey : k, mapValue : a }) → { mapKey = before.mapKey, mapValue = f before.mapValue }
        )
        m

in  map
