{-
Transform an `Optional` value with a function
-}
let map
    : ∀(a : Type) → ∀(b : Type) → (a → b) → Optional a → Optional b
    =   λ(a : Type)
      → λ(b : Type)
      → λ(f : a → b)
      → λ(o : Optional a)
      → Optional/fold a o (Optional b) (λ(x : a) → Some (f x)) (None b)

let example0 = assert : map Natural Bool Natural/even (Some 3) ≡ Some False

let example1 = assert : map Natural Bool Natural/even (None Natural) ≡ None Bool

in  map
