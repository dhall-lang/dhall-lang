{--
Unpack Optionals in a list, filtering out None values
--}

let List/concatMap =
        ./concatMap sha256:3b2167061d11fda1e4f6de0522cbe83e0d5ac4ef5ddf6bb0b2064470c5d3fb64
      ? ./concatMap

let Optional/toList =
        ../Optional/toList sha256:d78f160c619119ef12389e48a629ce293d69f7624c8d016b7a4767ab400344c4
      ? ../Optional/toList

let unpackItems
    : ∀(a : Type) → ∀(l : List (Optional a)) → List a
    = λ(a : Type) → List/concatMap (Optional a) a (Optional/toList a)

let example0 =
      assert : unpackItems Natural [ Some 1, None Natural, Some 3 ] ≡ [ 1, 3 ]

let example1 =
        assert
      : unpackItems Natural ([] : List (Optional Natural)) ≡ ([] : List Natural)

let example1 =
        assert
      : unpackItems Natural [ None Natural, None Natural ] ≡ ([] : List Natural)

in  unpackItems
